<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog</title><link>https://blog.shinetechsoftware.org/</link><description>Recent content on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 26 Jul 2019 09:39:48 +0800</lastBuildDate><atom:link href="https://blog.shinetechsoftware.org/index.xml" rel="self" type="application/rss+xml"/><item><title>如何优雅的在 Golang 中进行错误处理</title><link>https://blog.shinetechsoftware.org/2019/07/handle-error-graceful-in-golang/</link><pubDate>Fri, 26 Jul 2019 09:39:48 +0800</pubDate><guid>https://blog.shinetechsoftware.org/2019/07/handle-error-graceful-in-golang/</guid><description>&lt;p>如何优雅的在&lt;code>Golang&lt;/code>中进行错误处理？&lt;/p>
&lt;p>答案是：没有……（本文完）&lt;/p>
&lt;hr>
&lt;p>开个玩笑，&lt;code>Golang&lt;/code>中的错误处理方式一直是社区热烈讨论的话题，有力挺者，有抱怨者，但不论如何，自 2009 年&lt;code>Golang&lt;/code>正式发布以来，关于错误处理就一直是现在这种状况。&lt;/p>
&lt;p>随着&lt;code>Golang&lt;/code>愈加的火爆，原本是&lt;code>Java&lt;/code>、&lt;code>Node&lt;/code>、&lt;code>C#&lt;/code>等语言擅长的应用级开发领域也逐渐出现&lt;code>Golang&lt;/code>的身影。&lt;code>Golang&lt;/code>自身其实更加擅长做基础设施级开发，例如&lt;code>docker&lt;/code>，例如&lt;code>k8s&lt;/code>，再如&lt;code>etcd&lt;/code>，它友好的内存管理和简单到粗暴的语法（25 个关键字），特别适合过去&lt;code>C&lt;/code>和&lt;code>C++&lt;/code>这些语言所擅长的部分场景。我们有理由相信，&lt;code>Golang&lt;/code>下一个大的引爆点将也许会在&lt;code>IoT&lt;/code>上，因为它天然的适合。&lt;/p>
&lt;p>当一门语言火起来，就会出现各式各样的应用，于是&lt;code>MVC&lt;/code>框架有了，音视频处理库有了，各种数据库驱动有了，甚至服务框架也出现了，游戏、&lt;code>Machine Learning&lt;/code>都不在话下，还要啥自行车？组合一下做应用级开发妥妥的没毛病。&lt;/p>
&lt;p>但是，成也这 25 个关键字，败也这 25 个关键字，究其根本原因，都是因为它背后&lt;strong>简单&lt;/strong>的哲学。&lt;/p>
&lt;p>做应用级开发可不是那么简单的，这涉及到很多的细节处理，例如本文将要讨论的错误处理。如果只是写一个库，那么这个话题相对比较简单，因为与&lt;code>API&lt;/code>打交道的都是开发者，你只管开心的往外扔&lt;code>error&lt;/code>就好了，总会有倒霉的程序员在使用你的代码时&lt;strong>DEBUG&lt;/strong>到白头，最后，以最严谨的方式，小心使用你的库；可是有人出现的地方就会有幺蛾子，一个常见的误区就是将&lt;strong>业务错误&lt;/strong>、&lt;strong>运行时错误&lt;/strong>、&lt;strong>程序错误&lt;/strong>一股脑的当成相同的&lt;code>error&lt;/code>来处理。&lt;/p></description></item><item><title>函数式编程中的常用技巧</title><link>https://blog.shinetechsoftware.org/2015/11/functional-programming-skills/</link><pubDate>Tue, 24 Nov 2015 09:39:48 +0800</pubDate><guid>https://blog.shinetechsoftware.org/2015/11/functional-programming-skills/</guid><description>&lt;p>在 Clojure、Haskell、Python、Ruby 这些语言越来越流行的今天，我们撇开其在数学纯度性上的不同，单从它们都拥有&lt;code>一类函数&lt;/code>特性来讲，讨论函数式编程也显得很有意义。&lt;/p>
&lt;p>一类函数为函数式编程打下了基础，虽然这并不能表示可以完整发挥函数式编程的优势，但是如果能掌握一些基础的函数式编程技巧，那么仍将对并行编程、声明性编程以及测试等方面提供新的思路。&lt;/p>
&lt;p>很多开发者都有听过函数式编程，但更多是抱怨它太难，太碾压智商。的确，函数式编程中很多的概念理解起来都有一定的难度，最著名的莫过于[单子](&lt;a href="https://en.wikipedia.org/wiki/Monad_(functional_programming)">https://en.wikipedia.org/wiki/Monad_(functional_programming)&lt;/a>，但是通过一定的学习和实践会发现，函数式编程能让你站在一个更高的角度思考问题，并在某种层面上提升效率甚至是性能。我们都知道飞机比汽车难开，但是开飞机却明显比开汽车快，高学习成本的东西解决的大部分是高回报的需求，这不敢说是定论，但从实践来看这句话基本也正确。&lt;/p></description></item><item><title>使用异步编程</title><link>https://blog.shinetechsoftware.org/2014/12/asynchronous-programming/</link><pubDate>Wed, 03 Dec 2014 09:39:48 +0800</pubDate><guid>https://blog.shinetechsoftware.org/2014/12/asynchronous-programming/</guid><description>&lt;h2 id="导言">导言&lt;/h2>
&lt;p>现代的应用程序面临着诸多的挑战，如何构建具有可伸缩性和高性能的应用成为越来越多软件开发者思考的问题。随着应用规模的不断增大，业务复杂性的增长以及实时处理需求的增加，开发者不断尝试榨取硬件资源、优化。&lt;/p>
&lt;p>在不断的探索中，出现了很多简化场景的工具，比如提供可伸缩计算资源的 Amazon S3&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>、Windows Azure&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>，针对大数据的数据挖掘工具 MapReduce&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>，各种&lt;code>CDN&lt;/code>服务，&lt;code>云存储&lt;/code>服务等等。还有很多的工程实践例如敏捷&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>、DDD&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>等提供了指导。可以看到，将每个关注层面以服务的方式提供，成为了越来越流行的一种模式，或许我们可以激进的认为，这就是 SOA&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>开发者需要将不同的资源粘合在一起来提供最终的应用，这就需要协调不同的资源。&lt;/p></description></item></channel></rss>